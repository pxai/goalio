// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// schema
// Notes:
// To migrate the schema to a db:
//    npx prisma db push
// To run the administrator
//    npx prisma studio
// Before you access fron Next.js use
//    npm install @prisma/client
// Then run (and also Everytime you change the schema:)
//    npx prisma db push
//    npx prisma generate
// Then restart the server!!

model Goal {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  permalink String
  proof   String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  published Boolean @default(false)
  owner    User?   @relation(fields: [ownerId], references: [id])
  ownerId  String?
  milestones   Milestone[]
  permissions   Permission[]
  @@unique(fields: [id, ownerId], name: "id_and_ownerId")
}

model Permission {
  id      String     @default(cuid()) @id
  role    String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  goal    Goal?   @relation(fields: [goalId], references: [id])
  goalId  String?
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model Milestone {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  proof   String?
  permalink String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  goal    Goal?   @relation(fields: [goalId], references: [id])
  goalId  String?
  tasks   Task[]
}

model Task {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  proof   String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  milestone    Milestone?   @relation(fields: [milestoneId], references: [id])
  milestoneId  String?
}

model User {
  id            String   @default(cuid()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  goals         Goal[]
  milestones    Milestone[]
  tasks         Task[]
  sessions      Session[]
  permissions   Permission[]
  accounts      Account[] 
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
